---
title: "Dealing with Multiple Local Minima: the Rastrigin Test Function"
author: "Marc Paterno"
format: html
---
```{r setup, include=FALSE}
library(ggplot2)
library(lucid)
```

## The problem

The "likelihood function" we will eventually get from DUNE is very likely to be one that has multiple local minima, at least in some of the variables.
So it is important for us to look at how well currently available algorithms are able to find the global minimum in a function with multiple local minima.j

## The Rastrigin function

One useful test function to evaluate how well an algorithm deals with multiple local minima is the Rastrigin function.
This function is the sum of a series of terms, each of which is itself the sum of a parabola and negated cosine wave.
The global minimum of the function is at the origin.
But there are local minima at all local "half wavelengths".
The function's definition is:
$$f(\vec{x}) = 10 n + \sum_{i=1}^{n} ({x_i}^2 - 10 \cos(2 \pi x_i))$$
where $\vec{x}$ is the set of values $(x_1, \ldots , x_n)$.

```{r echo=FALSE}
#| fig-cap: The Rastrigin function in one dimension.
rastrigin <- function(x) {10 + x*x - 10 * cos(2*pi*x)}
ggplot() + xlim(-3, 3) + geom_function(fun=rastrigin, n = 501)
```

This function is symmetric about zero in every dimension.
For algorithms that make use of a search region, we select the region so that in each dimenion the global minimum is not centered.
Furthermore, we make sure it is differently off-center in each dimension.

## Solving in 2 dimenions

In 2 dimensions, the `dlib::find_min_global` function is able to find the global minimum.

```{r}
x2 <- data.table::fread("dlib-rastrigin-2.txt") |>
  dplyr::mutate(time = as.double(time)/1.e6)
ggplot(x2, aes(time, fmin)) +
  geom_point() +
  scale_x_log10(breaks=scales::trans_breaks("log10", function(x) 10^x),
                labels=scales::trans_format("log10", scales::math_format(10^.x))) +
  #ylim(0, NA) +
  labs(x="time limit (s)", y="best minimum")
```


## Solving in 5 dimensions

In 5 dimensions, the `dlib::find_min_global` function is not able to find the global minimum even if allowed to work for hours.

```{r echo=FALSE}
x5 <- data.table::fread("dlib-rastrigin-5.txt") |>
  dplyr::mutate(time = as.double(time)/1.e6)
ggplot(x5, aes(time, fmin)) +
  geom_point() +
  scale_x_log10(breaks=scales::trans_breaks("log10", function(x) 10^x),
                labels=scales::trans_format("log10", scales::math_format(10^.x))) +
  ylim(0, NA) +
  labs(x="time limit (s)", y="best minimum")
```
After 256 function calls, which takes about `r lucid(x5[9,]$time)` seconds, the algorithm is unable to improve its solution.
This is even after setting the maximum allowed number of function calls to `r x5[19,]$maxcalls`, which took `r lucid( x5[19,]$time/3600)` hours.
